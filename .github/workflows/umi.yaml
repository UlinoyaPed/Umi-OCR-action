name: Run Umi-OCR Docker

on:
  workflow_dispatch:
    inputs:
      pdf_url:
        description: 'PDF 文件链接'  # 用户输入 PDF 文件的 URL
        required: true
        type: string

jobs:
  run-umi-ocr:
    runs-on: ubuntu-latest  # 使用最新的 Ubuntu 作为运行环境
    permissions:
      packages: read  # 允许读取包
      contents: write  # 允许写入内容

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4  # 拉取当前仓库代码

      - name: Set up Python
        uses: actions/setup-python@v4  # 设置 Python 环境
        with:
          python-version: '3.10'  # 使用 Python 3.10

      # Step 2: Set up Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2  # 设置 Docker 构建环境

      # Step 3: Pull the Umi-OCR Docker image
      - name: Log into GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: set lower case owner name
        run: |
          echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
        env:
          OWNER: '${{ github.repository_owner }}'

      - name: Pull prebuilt image
        run: |
          docker pull ghcr.io/${{ env.OWNER_LC }}/umi-ocr-paddle:latest
          docker tag ghcr.io/${{ env.OWNER_LC }}/umi-ocr-paddle:latest umi-ocr-paddle:latest

      # Step 4: Run the Docker container in headless mode
      - name: Run Umi-OCR container
        run: |
          # 启动 Umi-OCR 容器，设置为无头模式并使用主机网络
          docker run -d --name umi-ocr \
            -e HEADLESS=true \
            --network host \
            umi-ocr-paddle:latest

      # Step 4.1: Verify Umi-OCR container is running
      - name: Verify Umi-OCR container
        run: |
          # 检查容器是否成功运行
          docker ps | grep umi-ocr || (echo "Umi-OCR container is not running" && exit 1)

      # Step 4.2: Check Umi-OCR API health
      - name: Check Umi-OCR API health
        run: |
          # 等待容器启动并检查 API 是否可用
          sleep 10
          curl -s -X GET http://127.0.0.1:1224/api/doc/get_options || (echo "Umi-OCR API is not responding" && exit 1)

      # Step 5: Download the PDF file
      - name: Download PDF
        run: |
          # 下载用户提供的 PDF 文件并记录原始文件名（去除后缀）
          for i in {1..3}; do
          curl -o input.pdf "${{ github.event.inputs.pdf_url }}" && break || sleep 5
          done
          if [ ! -s input.pdf ]; then
          echo "Failed to download PDF after 3 attempts" && exit 1
          fi

          # 先进行 URL 解码
          DECODED_URL=$(echo "${{ github.event.inputs.pdf_url }}" | python3 -c "import sys, urllib.parse; print(urllib.parse.unquote(sys.stdin.read()))")
          
          # 提取文件名并去掉扩展名
          ORIGINAL_NAME=$(basename "${DECODED_URL%%\?*}" .pdf)
          
          # 清理流程
          SAFE_NAME=$(python3 -c "from pathlib import Path; import sys; print(Path('$ORIGINAL_NAME').stem)")

          # 输出清理后的文件名
          echo "清理后的文件名: $SAFE_NAME"

          echo "ORIGINAL_NAME=$SAFE_NAME" >> $GITHUB_ENV

      # Step 6: Perform OCR on the PDF
      - name: Perform OCR
        run: |
          config='{
            "ocr.language": "models/config_chinese_cht(v2).txt",
            "ocr.cls": true,
            "ocr.limit_side_len": 2880
          }'
          # 上传 PDF 文件到 Umi-OCR API
          curl -s -X POST -F "file=@input.pdf" -F "json=$config" http://127.0.0.1:1224/api/doc/upload > upload_response.json
          cat upload_response.json  # 打印上传响应
          TASK_ID=$(jq -r '.data' upload_response.json)  # 提取任务 ID
          echo "Task ID: $TASK_ID"  # 打印任务 ID

          # 循环检查 OCR 任务状态
          while true; do
            curl -s -X POST -H "Content-Type: application/json" -d "{\"id\":\"$TASK_ID\"}" http://127.0.0.1:1224/api/doc/result > result.json
            cat result.json  # 打印任务状态响应
            IS_DONE=$(jq -r '.is_done' result.json)  # 检查任务是否完成
            PROCESSED_COUNT=$(jq -r '.processed_count' result.json)  # 已处理页数
            PAGES_COUNT=$(jq -r '.pages_count' result.json)  # 总页数
            echo "Processed $PROCESSED_COUNT/$PAGES_COUNT pages..."  # 实时输出进度
            if [ "$IS_DONE" = "true" ]; then
              break
            fi
            sleep 10  # 每隔几秒检查一次
          done

          # 请求下载 OCR 结果
          curl -s -X POST -H "Content-Type: application/json" -d "{\"id\":\"$TASK_ID\",\"file_types\":[\"pdfLayered\",\"pdfOneLayer\",\"txt\",\"txtPlain\",\"jsonl\",\"csv\"]}" http://127.0.0.1:1224/api/doc/download > download_response.json
          cat download_response.json  # 打印下载链接响应
          RAW_URL=$(jq -r '.data' download_response.json)  # 提取原始下载链接
          ENCODED_URL=$(echo "$RAW_URL" | sed 's/\[/%5B/g; s/\]/%5D/g')  # 替换中括号为编码形式
          echo "Encoded Download URL: $ENCODED_URL"  # 打印编码后的下载链接
          curl -s -o result.zip "$ENCODED_URL"  # 下载结果文件

      # Step 7: Upload the result as an artifact
      - name: Process and Upload OCR result
        run: |
          # 解压时强制处理非常规文件名
          unzip -o -O UTF-8 result.zip -d result

          # 使用稳健的重命名逻辑
          ORIGINAL_NAME="${{ env.ORIGINAL_NAME }}"
          
          # 方法一：使用 find + xargs 处理含空格文件名
          find result -type f -name '*input*' -print0 | while IFS= read -r -d '' FILE; do
            DIR_PATH=$(dirname "$FILE")
            OLD_NAME=$(basename "$FILE")
            NEW_NAME="${OLD_NAME//input/$ORIGINAL_NAME}"
            mv -- "$FILE" "$DIR_PATH/$NEW_NAME"
          done

          # 方法二（更安全）：使用并行处理
          # find result -type f -name '*input*' | parallel -q mv -- {} "$(echo {} | sed 's/input/$ORIGINAL_NAME/')"

          # 打印调试信息
          echo "Final structure:"
          find result -exec ls -ld {} \;

      - name: Upload OCR result
        uses: actions/upload-artifact@v4
        with:
          name: ocr-result  # 上传整个文件夹
          path: result/  # 文件夹路径